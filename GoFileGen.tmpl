// Package {{.GetNamespace}} Automatic generation for {{.Name}}
// generated file {{.GetNameNoNamespace}}.go
package {{.GetNamespace}}

import (
	"github.com/gopherjs/gopherjs/js"
{{ range $key, $value := .Imports }}
	{{ $key }} "{{ $value }}"
{{ end }}
)
{{$class := . -}}
{{/* class generation */}}
// {{.GetNameNoNamespace}} {{.GetFirstDescriptionLine}} 
{{- range .GetNextDescriptionLines}}
// {{. -}}
{{- end}}
type {{.GetNameNoNamespace}} struct {
    *js.Object
}

{{range .Constructor.GoFunctions -}}
// New{{.Return.GetType}}{{.Suffix}} {{.GetFirstDescriptionLine}} 
{{- range .GetNextDescriptionLines}}
// {{. -}}
{{- end}}
func New{{.Return.GetType}}{{.Suffix}}({{.GetParameterFullString}}) *{{.Return.GetType}} {
    return &{{.Return.GetType}}{js.Global{{range .GetNameSplit -}}
		.Get("{{.}}")
	{{- end}}.New({{.GetParameterCallString}})}
}
{{end}}

{{/* conversion function */}}
// {{.GetNameNoNamespace}} Binding conversion method to {{.GetNameNoNamespace}} point 
func To{{.GetNameNoNamespace}}(jsStruct interface{}) *{{.GetNameNoNamespace}} {
    if object, ok := jsStruct.(*js.Object); ok {
		return &{{.GetNameNoNamespace}}{Object: object}
	}
	return nil
}


{{range .Members -}}
{{if not .IsPrivate}}{{if not .Type.IsCallback}}
// {{.GetNameUpperInitial}} {{.GetFirstDescriptionLine}} 
{{- range .GetNextDescriptionLines}}
// {{. -}}
{{- end}}
func (self *{{$class.GetNameNoNamespace}}) {{.GetNameUpperInitial}}() {{.Type.GetTypeOptionalPointer -}} {
{{- if .Type.HasWrapper}}
    return {{.Type.Wrapper}}(self.Object.Get("{{.Name}}"))
{{else if .Type.IsAnyType}}
    return self.Object.Get("{{.Name}}")
{{else if .Type.IsNativeType}}
    return self.Object.Get("{{.Name}}").{{.Type.GetGopherjsCallName}}()
{{else if .Type.IsGenericArray}}
	array00 := self.Object.Get("{{.Name}}")
	length00 := array00.Length()
	out00 := make([]interface{}, length00, length00)
	for i00 := 0; i00 < length00; i00++ {
		out00[i00] = array00.Index(i00)
	}
	return out00
{{else if .Type.IsArray}}
	array00 := self.Object.Get("{{.Name}}")
	length00 := array00.Length()
	out00 := make({{.Type.GetType}}, length00, length00)
	for i00 := 0; i00 < length00; i00++ {
		out00[i00] = {{.Type.GetTypeInArray}}{array00.Index(i00)}
	}
	return out00
{{else}}
    return &{{.Type.GetType}}{self.Object.Get("{{.Name}}")}
{{end -}}
}
{{end}}{{end -}}

{{if not .IsPrivate}}
// Set{{.GetNameUpperInitial}}A {{.GetFirstDescriptionLine}} 
{{- range .GetNextDescriptionLines}}
// {{. -}}
{{- end}}
func (self *{{$class.GetNameNoNamespace}}) Set{{.GetNameUpperInitial}}A(member {{.Type.GetTypeOptionalPointer}}) {
    self.Object.Set("{{.Name}}", member)
}
{{end}}
{{- end}}

{{range .Functions -}}
// {{.GetNameUpperInitial}}{{.Suffix}} {{.GetFirstDescriptionLine}} 
{{- range .GetNextDescriptionLines}}
// {{. -}}
{{- end}}
func (self *{{$class.GetNameNoNamespace}}) {{.GetNameUpperInitial}}{{.Suffix}}({{.GetParameterFullString}}) {{if not .Return.IsVoid -}}{{.Return.GetTypeOptionalPointer}} {{- end}}{
{{- if .Return.IsVoid}}
    self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}})
{{else if .Return.HasWrapper}}
    return {{.Return.Wrapper}}(self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}}))
{{else if .Return.IsAnyType}}
    return self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}})
{{else if .Return.IsNativeType}}
    return self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}}).{{.Return.GetGopherjsCallName}}()
{{else if .Return.IsGenericArray}}
	array00 := self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}})
	length00 := array00.Length()
	out00 := make([]interface{}, length00, length00)
	for i00 := 0; i00 < length00; i00++ {
		out00[i00] = array00.Index(i00)
	}
	return out00
{{else if .Return.IsArray}}
	array00 := self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}})
	length00 := array00.Length()
	out00 := make({{.Return.GetType}}, length00, length00)
	for i00 := 0; i00 < length00; i00++ {
		{{if .Return.IsNativeTypeInArray -}}
			out00[i00] = array00.Index(i00).{{.Return.GetGopherjsCallNameInArray}}()
		{{else}}
			out00[i00] = {{.Return.GetTypeInArray}}{array00.Index(i00)}
		{{- end}}
	}
	return out00
{{else if .Return.IsCallback}}
    return {{.Return.GetType}}{self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}})}
{{else}}
    return &{{.Return.GetType}}{self.Object.Call("{{.Name}}"{{.GetParameterCallStringWithCommaPrefix}})}
{{end -}}
}

{{end}}