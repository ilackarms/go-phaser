// Automatic generation for {{.Name}}
// generated file {{.GetNameNoNamespace}}.go
package {{.GetNamespace}}

import (
	"github.com/gopherjs/gopherjs/js"
{{ range $key, $value := .Imports }}
	{{ $key }} "{{ $value }}"
{{ end }}
)
{{$class := . -}}
{{/* class generation */}}
{{- range .GetDescriptionLines}}
// {{. -}}
{{- end}}
type {{.GetNameNoNamespace}} struct {
    *js.Object
}

{{range .Members -}}
{{if not .IsPrivate}}{{if not .IsCallback}}
{{- range .GetDescriptionLines}}
// {{. -}}
{{- end}}
func (self *{{$class.GetNameNoNamespace}}) Get{{.GetNameUpperInitial}}() {{.Type.GetType -}} {
{{- if .Type.IsAnyType}}
    return self.Get("{{.Name}}")
{{else if .Type.IsNativeType}}
    return self.Get("{{.Name}}").{{.Type.GetGopherjsCallName}}()
{{else if .Type.IsGenericArray}}
	array := self.Get("{{.Name}}")
	length := array.Length()
	out := make([]interface{}, length, length)
	for i := 0; i < length; i++ {
		out[i] = array.Index(i).Interface()
	}
	return out
{{else if .Type.IsArray}}
	array := self.Get("{{.Name}}")
	length := array.Length()
	out := make({{.Type.GetType}}, length, length)
	for i := 0; i < length; i++ {
		out[i] = {{.Type.GetTypeInArray}}{array.Index(i)}
	}
	return out
{{else}}
    return {{.Type.GetType}}{self.Get("{{.Name}}")}
{{end -}}
}
{{end}}{{end -}}

{{if not .IsPrivate}}
{{- range .GetDescriptionLines}}
// {{. -}}
{{- end}}
func (self *{{$class.GetNameNoNamespace}}) Set{{.GetNameUpperInitial}}(member {{.Type.GetType}}) {
    self.Set("{{.Name}}", member)
}
{{end}}
{{- end}}

{{range .Functions -}}
{{- range .GetDescriptionLines}}
// {{. -}}
{{- end}}
func (self *{{$class.GetNameNoNamespace}}) {{.GetNameUpperInitial}}I(args ...interface{}) {{if not .Return.IsVoid -}}{{.Return.GetType}} {{- end}}{
{{- if .Return.IsVoid}}
    self.Call("{{.Name}}", args)
{{else if .Return.IsAnyType}}
    return self.Call("{{.Name}}", args)
{{else if .Return.IsNativeType}}
    return self.Call("{{.Name}}", args).{{.Return.GetGopherjsCallName}}()
{{else if .Return.IsGenericArray}}
	array := self.Call("{{.Name}}", args)
	length := array.Length()
	out := make([]interface{}, length, length)
	for i := 0; i < length; i++ {
		out[i] = array.Index(i).Interface()
	}
	return out
{{else if .Return.IsArray}}
	array := self.Call("{{.Name}}", args)
	length := array.Length()
	out := make({{.Return.GetType}}, length, length)
	for i := 0; i < length; i++ {
		{{if .Return.IsNativeTypeInArray -}}
			out[i] = array.Index(i).{{.Return.GetGopherjsCallNameInArray}}()
		{{else}}
			out[i] = {{.Return.GetTypeInArray}}{array.Index(i)}
		{{- end}}
	}
	return out
{{else}}
    return {{.Return.GetType}}{self.Call("{{.Name}}", args)}
{{end -}}
}
{{end}}